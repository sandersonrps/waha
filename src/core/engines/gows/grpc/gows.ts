/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: gows.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace messages {
    export enum LogLevel {
        TRACE = 0,
        DEBUG = 1,
        INFO = 2,
        WARN = 3,
        ERROR = 4
    }
    export enum ParticipantAction {
        ADD = 0,
        REMOVE = 1,
        PROMOTE = 2,
        DEMOTE = 3
    }
    export enum MediaType {
        IMAGE = 0,
        AUDIO = 1,
        VIDEO = 2,
        DOCUMENT = 3
    }
    export enum Presence {
        AVAILABLE = 0,
        UNAVAILABLE = 1
    }
    export enum ChatPresence {
        TYPING = 0,
        RECORDING = 1,
        PAUSED = 2
    }
    export enum ReceiptType {
        READ = 0,
        PLAYED = 1
    }
    export class OptionalString extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: string;
        }): OptionalString {
            const message = new OptionalString({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: string;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeString(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionalString {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionalString();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OptionalString {
            return OptionalString.deserialize(bytes);
        }
    }
    export class OptionalUInt32 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: number;
        }): OptionalUInt32 {
            const message = new OptionalUInt32({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: number;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != 0)
                writer.writeUint32(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionalUInt32 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionalUInt32();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OptionalUInt32 {
            return OptionalUInt32.deserialize(bytes);
        }
    }
    export class OptionalUInt64 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: number;
        }): OptionalUInt64 {
            const message = new OptionalUInt64({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: number;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != 0)
                writer.writeUint64(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionalUInt64 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionalUInt64();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OptionalUInt64 {
            return OptionalUInt64.deserialize(bytes);
        }
    }
    export class OptionalBool extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set value(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: boolean;
        }): OptionalBool {
            const message = new OptionalBool({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: boolean;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != false)
                writer.writeBool(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionalBool {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionalBool();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OptionalBool {
            return OptionalBool.deserialize(bytes);
        }
    }
    export class JidRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
        }): JidRequest {
            const message = new JidRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JidRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JidRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JidRequest {
            return JidRequest.deserialize(bytes);
        }
    }
    export class JidStringRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            value?: string;
        }): JidStringRequest {
            const message = new JidStringRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                value?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.value.length)
                writer.writeString(3, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JidStringRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JidStringRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JidStringRequest {
            return JidStringRequest.deserialize(bytes);
        }
    }
    export class JidBoolRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            value?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set value(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            value?: boolean;
        }): JidBoolRequest {
            const message = new JidBoolRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                value?: boolean;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.value != false)
                writer.writeBool(3, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JidBoolRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JidBoolRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.value = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JidBoolRequest {
            return JidBoolRequest.deserialize(bytes);
        }
    }
    export class EventJson extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: string;
            event?: string;
            data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get session() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set session(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get event() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set event(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            session?: string;
            event?: string;
            data?: string;
        }): EventJson {
            const message = new EventJson({});
            if (data.session != null) {
                message.session = data.session;
            }
            if (data.event != null) {
                message.event = data.event;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: string;
                event?: string;
                data?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session;
            }
            if (this.event != null) {
                data.event = this.event;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session.length)
                writer.writeString(2, this.session);
            if (this.event.length)
                writer.writeString(1, this.event);
            if (this.data.length)
                writer.writeString(3, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventJson {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventJson();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.session = reader.readString();
                        break;
                    case 1:
                        message.event = reader.readString();
                        break;
                    case 3:
                        message.data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventJson {
            return EventJson.deserialize(bytes);
        }
    }
    export class PairCodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            phone?: string;
        }): PairCodeRequest {
            const message = new PairCodeRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                phone?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.phone.length)
                writer.writeString(2, this.phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PairCodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PairCodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PairCodeRequest {
            return PairCodeRequest.deserialize(bytes);
        }
    }
    export class PairCodeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            code?: string;
        }): PairCodeResponse {
            const message = new PairCodeResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code.length)
                writer.writeString(1, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PairCodeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PairCodeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PairCodeResponse {
            return PairCodeResponse.deserialize(bytes);
        }
    }
    export class Empty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Empty {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    export class SessionLogConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            level?: LogLevel;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
            }
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 1, LogLevel.TRACE) as LogLevel;
        }
        set level(value: LogLevel) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            level?: LogLevel;
        }): SessionLogConfig {
            const message = new SessionLogConfig({});
            if (data.level != null) {
                message.level = data.level;
            }
            return message;
        }
        toObject() {
            const data: {
                level?: LogLevel;
            } = {};
            if (this.level != null) {
                data.level = this.level;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.level != LogLevel.TRACE)
                writer.writeEnum(1, this.level);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionLogConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionLogConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.level = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionLogConfig {
            return SessionLogConfig.deserialize(bytes);
        }
    }
    export class SessionStoreConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            dialect?: string;
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dialect" in data && data.dialect != undefined) {
                    this.dialect = data.dialect;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get dialect() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set dialect(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            dialect?: string;
            address?: string;
        }): SessionStoreConfig {
            const message = new SessionStoreConfig({});
            if (data.dialect != null) {
                message.dialect = data.dialect;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                dialect?: string;
                address?: string;
            } = {};
            if (this.dialect != null) {
                data.dialect = this.dialect;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.dialect.length)
                writer.writeString(2, this.dialect);
            if (this.address.length)
                writer.writeString(3, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionStoreConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionStoreConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.dialect = reader.readString();
                        break;
                    case 3:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionStoreConfig {
            return SessionStoreConfig.deserialize(bytes);
        }
    }
    export class SessionProxyConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            url?: string;
        }): SessionProxyConfig {
            const message = new SessionProxyConfig({});
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionProxyConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionProxyConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionProxyConfig {
            return SessionProxyConfig.deserialize(bytes);
        }
    }
    export class SessionConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            store?: SessionStoreConfig;
            log?: SessionLogConfig;
            proxy?: SessionProxyConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("store" in data && data.store != undefined) {
                    this.store = data.store;
                }
                if ("log" in data && data.log != undefined) {
                    this.log = data.log;
                }
                if ("proxy" in data && data.proxy != undefined) {
                    this.proxy = data.proxy;
                }
            }
        }
        get store() {
            return pb_1.Message.getWrapperField(this, SessionStoreConfig, 1) as SessionStoreConfig;
        }
        set store(value: SessionStoreConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_store() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get log() {
            return pb_1.Message.getWrapperField(this, SessionLogConfig, 2) as SessionLogConfig;
        }
        set log(value: SessionLogConfig) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_log() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get proxy() {
            return pb_1.Message.getWrapperField(this, SessionProxyConfig, 3) as SessionProxyConfig;
        }
        set proxy(value: SessionProxyConfig) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_proxy() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            store?: ReturnType<typeof SessionStoreConfig.prototype.toObject>;
            log?: ReturnType<typeof SessionLogConfig.prototype.toObject>;
            proxy?: ReturnType<typeof SessionProxyConfig.prototype.toObject>;
        }): SessionConfig {
            const message = new SessionConfig({});
            if (data.store != null) {
                message.store = SessionStoreConfig.fromObject(data.store);
            }
            if (data.log != null) {
                message.log = SessionLogConfig.fromObject(data.log);
            }
            if (data.proxy != null) {
                message.proxy = SessionProxyConfig.fromObject(data.proxy);
            }
            return message;
        }
        toObject() {
            const data: {
                store?: ReturnType<typeof SessionStoreConfig.prototype.toObject>;
                log?: ReturnType<typeof SessionLogConfig.prototype.toObject>;
                proxy?: ReturnType<typeof SessionProxyConfig.prototype.toObject>;
            } = {};
            if (this.store != null) {
                data.store = this.store.toObject();
            }
            if (this.log != null) {
                data.log = this.log.toObject();
            }
            if (this.proxy != null) {
                data.proxy = this.proxy.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_store)
                writer.writeMessage(1, this.store, () => this.store.serialize(writer));
            if (this.has_log)
                writer.writeMessage(2, this.log, () => this.log.serialize(writer));
            if (this.has_proxy)
                writer.writeMessage(3, this.proxy, () => this.proxy.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.store, () => message.store = SessionStoreConfig.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.log, () => message.log = SessionLogConfig.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.proxy, () => message.proxy = SessionProxyConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionConfig {
            return SessionConfig.deserialize(bytes);
        }
    }
    export class StartSessionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            config?: SessionConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config() {
            return pb_1.Message.getWrapperField(this, SessionConfig, 2) as SessionConfig;
        }
        set config(value: SessionConfig) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_config() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            id?: string;
            config?: ReturnType<typeof SessionConfig.prototype.toObject>;
        }): StartSessionRequest {
            const message = new StartSessionRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.config != null) {
                message.config = SessionConfig.fromObject(data.config);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                config?: ReturnType<typeof SessionConfig.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.config != null) {
                data.config = this.config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.has_config)
                writer.writeMessage(2, this.config, () => this.config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartSessionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartSessionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.config, () => message.config = SessionConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartSessionRequest {
            return StartSessionRequest.deserialize(bytes);
        }
    }
    export class SessionStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            found?: boolean;
            connected?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("found" in data && data.found != undefined) {
                    this.found = data.found;
                }
                if ("connected" in data && data.connected != undefined) {
                    this.connected = data.connected;
                }
            }
        }
        get found() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set found(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get connected() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set connected(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            found?: boolean;
            connected?: boolean;
        }): SessionStateResponse {
            const message = new SessionStateResponse({});
            if (data.found != null) {
                message.found = data.found;
            }
            if (data.connected != null) {
                message.connected = data.connected;
            }
            return message;
        }
        toObject() {
            const data: {
                found?: boolean;
                connected?: boolean;
            } = {};
            if (this.found != null) {
                data.found = this.found;
            }
            if (this.connected != null) {
                data.connected = this.connected;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.found != false)
                writer.writeBool(1, this.found);
            if (this.connected != false)
                writer.writeBool(2, this.connected);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.found = reader.readBool();
                        break;
                    case 2:
                        message.connected = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionStateResponse {
            return SessionStateResponse.deserialize(bytes);
        }
    }
    export class Session extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): Session {
            const message = new Session({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Session {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Session();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Session {
            return Session.deserialize(bytes);
        }
    }
    export class ProfileNameRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            name?: string;
        }): ProfileNameRequest {
            const message = new ProfileNameRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                name?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfileNameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfileNameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProfileNameRequest {
            return ProfileNameRequest.deserialize(bytes);
        }
    }
    export class ProfileStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            status?: string;
        }): ProfileStatusRequest {
            const message = new ProfileStatusRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                status?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.status.length)
                writer.writeString(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfileStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfileStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProfileStatusRequest {
            return ProfileStatusRequest.deserialize(bytes);
        }
    }
    export class SetProfilePictureRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            picture?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("picture" in data && data.picture != undefined) {
                    this.picture = data.picture;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get picture() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set picture(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            picture?: Uint8Array;
        }): SetProfilePictureRequest {
            const message = new SetProfilePictureRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.picture != null) {
                message.picture = data.picture;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                picture?: Uint8Array;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.picture != null) {
                data.picture = this.picture;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.picture.length)
                writer.writeBytes(2, this.picture);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetProfilePictureRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetProfilePictureRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.picture = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetProfilePictureRequest {
            return SetProfilePictureRequest.deserialize(bytes);
        }
    }
    export class CreateGroupRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            name?: string;
            participants?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("participants" in data && data.participants != undefined) {
                    this.participants = data.participants;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get participants() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set participants(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            name?: string;
            participants?: string[];
        }): CreateGroupRequest {
            const message = new CreateGroupRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.participants != null) {
                message.participants = data.participants;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                name?: string;
                participants?: string[];
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.participants != null) {
                data.participants = this.participants;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.participants.length)
                writer.writeRepeatedString(3, this.participants);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGroupRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGroupRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateGroupRequest {
            return CreateGroupRequest.deserialize(bytes);
        }
    }
    export class SetPictureRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            picture?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("picture" in data && data.picture != undefined) {
                    this.picture = data.picture;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get picture() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set picture(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            picture?: Uint8Array;
        }): SetPictureRequest {
            const message = new SetPictureRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.picture != null) {
                message.picture = data.picture;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                picture?: Uint8Array;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.picture != null) {
                data.picture = this.picture;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.picture.length)
                writer.writeBytes(3, this.picture);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetPictureRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetPictureRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.picture = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetPictureRequest {
            return SetPictureRequest.deserialize(bytes);
        }
    }
    export class UpdateParticipantsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            participants?: string[];
            action?: ParticipantAction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("participants" in data && data.participants != undefined) {
                    this.participants = data.participants;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get participants() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set participants(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get action() {
            return pb_1.Message.getFieldWithDefault(this, 4, ParticipantAction.ADD) as ParticipantAction;
        }
        set action(value: ParticipantAction) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            participants?: string[];
            action?: ParticipantAction;
        }): UpdateParticipantsRequest {
            const message = new UpdateParticipantsRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.participants != null) {
                message.participants = data.participants;
            }
            if (data.action != null) {
                message.action = data.action;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                participants?: string[];
                action?: ParticipantAction;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.participants != null) {
                data.participants = this.participants;
            }
            if (this.action != null) {
                data.action = this.action;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.participants.length)
                writer.writeRepeatedString(3, this.participants);
            if (this.action != ParticipantAction.ADD)
                writer.writeEnum(4, this.action);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateParticipantsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateParticipantsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.action = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateParticipantsRequest {
            return UpdateParticipantsRequest.deserialize(bytes);
        }
    }
    export class GroupCodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            code?: string;
        }): GroupCodeRequest {
            const message = new GroupCodeRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                code?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.code.length)
                writer.writeString(2, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupCodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupCodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupCodeRequest {
            return GroupCodeRequest.deserialize(bytes);
        }
    }
    export class AudioInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            duration?: number;
            waveform?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("waveform" in data && data.waveform != undefined) {
                    this.waveform = data.waveform;
                }
            }
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get waveform() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set waveform(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            duration?: number;
            waveform?: Uint8Array;
        }): AudioInfo {
            const message = new AudioInfo({});
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.waveform != null) {
                message.waveform = data.waveform;
            }
            return message;
        }
        toObject() {
            const data: {
                duration?: number;
                waveform?: Uint8Array;
            } = {};
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.waveform != null) {
                data.waveform = this.waveform;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.duration != 0)
                writer.writeFloat(1, this.duration);
            if (this.waveform.length)
                writer.writeBytes(2, this.waveform);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.duration = reader.readFloat();
                        break;
                    case 2:
                        message.waveform = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioInfo {
            return AudioInfo.deserialize(bytes);
        }
    }
    export class Media extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: Uint8Array;
            type?: MediaType;
            mimetype?: string;
            audio?: AudioInfo;
            filename?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("mimetype" in data && data.mimetype != undefined) {
                    this.mimetype = data.mimetype;
                }
                if ("audio" in data && data.audio != undefined) {
                    this.audio = data.audio;
                }
                if ("filename" in data && data.filename != undefined) {
                    this.filename = data.filename;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set content(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, MediaType.IMAGE) as MediaType;
        }
        set type(value: MediaType) {
            pb_1.Message.setField(this, 2, value);
        }
        get mimetype() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set mimetype(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get audio() {
            return pb_1.Message.getWrapperField(this, AudioInfo, 4) as AudioInfo;
        }
        set audio(value: AudioInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_audio() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get filename() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set filename(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            content?: Uint8Array;
            type?: MediaType;
            mimetype?: string;
            audio?: ReturnType<typeof AudioInfo.prototype.toObject>;
            filename?: string;
        }): Media {
            const message = new Media({});
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.mimetype != null) {
                message.mimetype = data.mimetype;
            }
            if (data.audio != null) {
                message.audio = AudioInfo.fromObject(data.audio);
            }
            if (data.filename != null) {
                message.filename = data.filename;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: Uint8Array;
                type?: MediaType;
                mimetype?: string;
                audio?: ReturnType<typeof AudioInfo.prototype.toObject>;
                filename?: string;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.mimetype != null) {
                data.mimetype = this.mimetype;
            }
            if (this.audio != null) {
                data.audio = this.audio.toObject();
            }
            if (this.filename != null) {
                data.filename = this.filename;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeBytes(1, this.content);
            if (this.type != MediaType.IMAGE)
                writer.writeEnum(2, this.type);
            if (this.mimetype.length)
                writer.writeString(3, this.mimetype);
            if (this.has_audio)
                writer.writeMessage(4, this.audio, () => this.audio.serialize(writer));
            if (this.filename.length)
                writer.writeString(5, this.filename);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Media {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Media();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readBytes();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.mimetype = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.audio, () => message.audio = AudioInfo.deserialize(reader));
                        break;
                    case 5:
                        message.filename = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Media {
            return Media.deserialize(bytes);
        }
    }
    export class LinkPreview extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
            title?: string;
            description?: string;
            image?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set image(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            url?: string;
            title?: string;
            description?: string;
            image?: Uint8Array;
        }): LinkPreview {
            const message = new LinkPreview({});
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
                title?: string;
                description?: string;
                image?: Uint8Array;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.image.length)
                writer.writeBytes(4, this.image);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LinkPreview {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LinkPreview();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.image = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LinkPreview {
            return LinkPreview.deserialize(bytes);
        }
    }
    export class MessageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            text?: string;
            media?: Media;
            backgroundColor?: OptionalString;
            font?: OptionalUInt32;
            linkPreview?: boolean;
            linkPreviewHighQuality?: boolean;
            replyTo?: string;
            id?: string;
            participants?: string[];
            preview?: LinkPreview;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("media" in data && data.media != undefined) {
                    this.media = data.media;
                }
                if ("backgroundColor" in data && data.backgroundColor != undefined) {
                    this.backgroundColor = data.backgroundColor;
                }
                if ("font" in data && data.font != undefined) {
                    this.font = data.font;
                }
                if ("linkPreview" in data && data.linkPreview != undefined) {
                    this.linkPreview = data.linkPreview;
                }
                if ("linkPreviewHighQuality" in data && data.linkPreviewHighQuality != undefined) {
                    this.linkPreviewHighQuality = data.linkPreviewHighQuality;
                }
                if ("replyTo" in data && data.replyTo != undefined) {
                    this.replyTo = data.replyTo;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("participants" in data && data.participants != undefined) {
                    this.participants = data.participants;
                }
                if ("preview" in data && data.preview != undefined) {
                    this.preview = data.preview;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get media() {
            return pb_1.Message.getWrapperField(this, Media, 4) as Media;
        }
        set media(value: Media) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_media() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get backgroundColor() {
            return pb_1.Message.getWrapperField(this, OptionalString, 5) as OptionalString;
        }
        set backgroundColor(value: OptionalString) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_backgroundColor() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get font() {
            return pb_1.Message.getWrapperField(this, OptionalUInt32, 6) as OptionalUInt32;
        }
        set font(value: OptionalUInt32) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_font() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get linkPreview() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set linkPreview(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get linkPreviewHighQuality() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set linkPreviewHighQuality(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get replyTo() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set replyTo(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get participants() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as string[];
        }
        set participants(value: string[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get preview() {
            return pb_1.Message.getWrapperField(this, LinkPreview, 12) as LinkPreview;
        }
        set preview(value: LinkPreview) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_preview() {
            return pb_1.Message.getField(this, 12) != null;
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            text?: string;
            media?: ReturnType<typeof Media.prototype.toObject>;
            backgroundColor?: ReturnType<typeof OptionalString.prototype.toObject>;
            font?: ReturnType<typeof OptionalUInt32.prototype.toObject>;
            linkPreview?: boolean;
            linkPreviewHighQuality?: boolean;
            replyTo?: string;
            id?: string;
            participants?: string[];
            preview?: ReturnType<typeof LinkPreview.prototype.toObject>;
        }): MessageRequest {
            const message = new MessageRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.media != null) {
                message.media = Media.fromObject(data.media);
            }
            if (data.backgroundColor != null) {
                message.backgroundColor = OptionalString.fromObject(data.backgroundColor);
            }
            if (data.font != null) {
                message.font = OptionalUInt32.fromObject(data.font);
            }
            if (data.linkPreview != null) {
                message.linkPreview = data.linkPreview;
            }
            if (data.linkPreviewHighQuality != null) {
                message.linkPreviewHighQuality = data.linkPreviewHighQuality;
            }
            if (data.replyTo != null) {
                message.replyTo = data.replyTo;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.participants != null) {
                message.participants = data.participants;
            }
            if (data.preview != null) {
                message.preview = LinkPreview.fromObject(data.preview);
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                text?: string;
                media?: ReturnType<typeof Media.prototype.toObject>;
                backgroundColor?: ReturnType<typeof OptionalString.prototype.toObject>;
                font?: ReturnType<typeof OptionalUInt32.prototype.toObject>;
                linkPreview?: boolean;
                linkPreviewHighQuality?: boolean;
                replyTo?: string;
                id?: string;
                participants?: string[];
                preview?: ReturnType<typeof LinkPreview.prototype.toObject>;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.media != null) {
                data.media = this.media.toObject();
            }
            if (this.backgroundColor != null) {
                data.backgroundColor = this.backgroundColor.toObject();
            }
            if (this.font != null) {
                data.font = this.font.toObject();
            }
            if (this.linkPreview != null) {
                data.linkPreview = this.linkPreview;
            }
            if (this.linkPreviewHighQuality != null) {
                data.linkPreviewHighQuality = this.linkPreviewHighQuality;
            }
            if (this.replyTo != null) {
                data.replyTo = this.replyTo;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.participants != null) {
                data.participants = this.participants;
            }
            if (this.preview != null) {
                data.preview = this.preview.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.text.length)
                writer.writeString(3, this.text);
            if (this.has_media)
                writer.writeMessage(4, this.media, () => this.media.serialize(writer));
            if (this.has_backgroundColor)
                writer.writeMessage(5, this.backgroundColor, () => this.backgroundColor.serialize(writer));
            if (this.has_font)
                writer.writeMessage(6, this.font, () => this.font.serialize(writer));
            if (this.linkPreview != false)
                writer.writeBool(7, this.linkPreview);
            if (this.linkPreviewHighQuality != false)
                writer.writeBool(8, this.linkPreviewHighQuality);
            if (this.replyTo.length)
                writer.writeString(9, this.replyTo);
            if (this.id.length)
                writer.writeString(10, this.id);
            if (this.participants.length)
                writer.writeRepeatedString(11, this.participants);
            if (this.has_preview)
                writer.writeMessage(12, this.preview, () => this.preview.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.text = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.media, () => message.media = Media.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.backgroundColor, () => message.backgroundColor = OptionalString.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.font, () => message.font = OptionalUInt32.deserialize(reader));
                        break;
                    case 7:
                        message.linkPreview = reader.readBool();
                        break;
                    case 8:
                        message.linkPreviewHighQuality = reader.readBool();
                        break;
                    case 9:
                        message.replyTo = reader.readString();
                        break;
                    case 10:
                        message.id = reader.readString();
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readString());
                        break;
                    case 12:
                        reader.readMessage(message.preview, () => message.preview = LinkPreview.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageRequest {
            return MessageRequest.deserialize(bytes);
        }
    }
    export class MessageReaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            sender?: string;
            messageId?: string;
            reaction?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("messageId" in data && data.messageId != undefined) {
                    this.messageId = data.messageId;
                }
                if ("reaction" in data && data.reaction != undefined) {
                    this.reaction = data.reaction;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get messageId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set messageId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get reaction() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set reaction(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            sender?: string;
            messageId?: string;
            reaction?: string;
        }): MessageReaction {
            const message = new MessageReaction({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.messageId != null) {
                message.messageId = data.messageId;
            }
            if (data.reaction != null) {
                message.reaction = data.reaction;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                sender?: string;
                messageId?: string;
                reaction?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.messageId != null) {
                data.messageId = this.messageId;
            }
            if (this.reaction != null) {
                data.reaction = this.reaction;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.sender.length)
                writer.writeString(3, this.sender);
            if (this.messageId.length)
                writer.writeString(4, this.messageId);
            if (this.reaction.length)
                writer.writeString(5, this.reaction);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageReaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageReaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.sender = reader.readString();
                        break;
                    case 4:
                        message.messageId = reader.readString();
                        break;
                    case 5:
                        message.reaction = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageReaction {
            return MessageReaction.deserialize(bytes);
        }
    }
    export class MessageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            timestamp?: number;
            message?: Json;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getWrapperField(this, Json, 3) as Json;
        }
        set message(value: Json) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            id?: string;
            timestamp?: number;
            message?: ReturnType<typeof Json.prototype.toObject>;
        }): MessageResponse {
            const message = new MessageResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.message != null) {
                message.message = Json.fromObject(data.message);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                timestamp?: number;
                message?: ReturnType<typeof Json.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.timestamp != 0)
                writer.writeInt64(2, this.timestamp);
            if (this.has_message)
                writer.writeMessage(3, this.message, () => this.message.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.timestamp = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.message, () => message.message = Json.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageResponse {
            return MessageResponse.deserialize(bytes);
        }
    }
    export class NewMessageIDResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): NewMessageIDResponse {
            const message = new NewMessageIDResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewMessageIDResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewMessageIDResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewMessageIDResponse {
            return NewMessageIDResponse.deserialize(bytes);
        }
    }
    export class ProfilePictureRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
        }): ProfilePictureRequest {
            const message = new ProfilePictureRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfilePictureRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfilePictureRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProfilePictureRequest {
            return ProfilePictureRequest.deserialize(bytes);
        }
    }
    export class ProfilePictureResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            url?: string;
        }): ProfilePictureResponse {
            const message = new ProfilePictureResponse({});
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(2, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfilePictureResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfilePictureResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProfilePictureResponse {
            return ProfilePictureResponse.deserialize(bytes);
        }
    }
    export class ButtonReplyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            selectedDisplayText?: string;
            selectedButtonID?: string;
            replyTo?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("selectedDisplayText" in data && data.selectedDisplayText != undefined) {
                    this.selectedDisplayText = data.selectedDisplayText;
                }
                if ("selectedButtonID" in data && data.selectedButtonID != undefined) {
                    this.selectedButtonID = data.selectedButtonID;
                }
                if ("replyTo" in data && data.replyTo != undefined) {
                    this.replyTo = data.replyTo;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get selectedDisplayText() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set selectedDisplayText(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get selectedButtonID() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set selectedButtonID(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get replyTo() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set replyTo(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            selectedDisplayText?: string;
            selectedButtonID?: string;
            replyTo?: string;
        }): ButtonReplyRequest {
            const message = new ButtonReplyRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.selectedDisplayText != null) {
                message.selectedDisplayText = data.selectedDisplayText;
            }
            if (data.selectedButtonID != null) {
                message.selectedButtonID = data.selectedButtonID;
            }
            if (data.replyTo != null) {
                message.replyTo = data.replyTo;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                selectedDisplayText?: string;
                selectedButtonID?: string;
                replyTo?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.selectedDisplayText != null) {
                data.selectedDisplayText = this.selectedDisplayText;
            }
            if (this.selectedButtonID != null) {
                data.selectedButtonID = this.selectedButtonID;
            }
            if (this.replyTo != null) {
                data.replyTo = this.replyTo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.selectedDisplayText.length)
                writer.writeString(3, this.selectedDisplayText);
            if (this.selectedButtonID.length)
                writer.writeString(4, this.selectedButtonID);
            if (this.replyTo.length)
                writer.writeString(5, this.replyTo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ButtonReplyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ButtonReplyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.selectedDisplayText = reader.readString();
                        break;
                    case 4:
                        message.selectedButtonID = reader.readString();
                        break;
                    case 5:
                        message.replyTo = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ButtonReplyRequest {
            return ButtonReplyRequest.deserialize(bytes);
        }
    }
    export class PresenceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            status?: Presence;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, Presence.AVAILABLE) as Presence;
        }
        set status(value: Presence) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            status?: Presence;
        }): PresenceRequest {
            const message = new PresenceRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                status?: Presence;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.status != Presence.AVAILABLE)
                writer.writeEnum(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PresenceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PresenceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PresenceRequest {
            return PresenceRequest.deserialize(bytes);
        }
    }
    export class ChatPresenceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            status?: ChatPresence;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, ChatPresence.TYPING) as ChatPresence;
        }
        set status(value: ChatPresence) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            status?: ChatPresence;
        }): ChatPresenceRequest {
            const message = new ChatPresenceRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                status?: ChatPresence;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.status != ChatPresence.TYPING)
                writer.writeEnum(3, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatPresenceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatPresenceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatPresenceRequest {
            return ChatPresenceRequest.deserialize(bytes);
        }
    }
    export class SubscribePresenceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
        }): SubscribePresenceRequest {
            const message = new SubscribePresenceRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubscribePresenceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubscribePresenceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubscribePresenceRequest {
            return SubscribePresenceRequest.deserialize(bytes);
        }
    }
    export class MarkReadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            sender?: string;
            messageId?: string;
            type?: ReceiptType;
            messageIds?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("messageId" in data && data.messageId != undefined) {
                    this.messageId = data.messageId;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("messageIds" in data && data.messageIds != undefined) {
                    this.messageIds = data.messageIds;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get messageId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set messageId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 5, ReceiptType.READ) as ReceiptType;
        }
        set type(value: ReceiptType) {
            pb_1.Message.setField(this, 5, value);
        }
        get messageIds() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set messageIds(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            sender?: string;
            messageId?: string;
            type?: ReceiptType;
            messageIds?: string[];
        }): MarkReadRequest {
            const message = new MarkReadRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.messageId != null) {
                message.messageId = data.messageId;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.messageIds != null) {
                message.messageIds = data.messageIds;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                sender?: string;
                messageId?: string;
                type?: ReceiptType;
                messageIds?: string[];
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.messageId != null) {
                data.messageId = this.messageId;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.messageIds != null) {
                data.messageIds = this.messageIds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.sender.length)
                writer.writeString(3, this.sender);
            if (this.messageId.length)
                writer.writeString(4, this.messageId);
            if (this.type != ReceiptType.READ)
                writer.writeEnum(5, this.type);
            if (this.messageIds.length)
                writer.writeRepeatedString(6, this.messageIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarkReadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarkReadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.sender = reader.readString();
                        break;
                    case 4:
                        message.messageId = reader.readString();
                        break;
                    case 5:
                        message.type = reader.readEnum();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarkReadRequest {
            return MarkReadRequest.deserialize(bytes);
        }
    }
    export class CheckPhonesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            phones?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("phones" in data && data.phones != undefined) {
                    this.phones = data.phones;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get phones() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set phones(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            phones?: string[];
        }): CheckPhonesRequest {
            const message = new CheckPhonesRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.phones != null) {
                message.phones = data.phones;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                phones?: string[];
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.phones != null) {
                data.phones = this.phones;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.phones.length)
                writer.writeRepeatedString(2, this.phones);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckPhonesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckPhonesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckPhonesRequest {
            return CheckPhonesRequest.deserialize(bytes);
        }
    }
    export class PhoneInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
            jid?: string;
            registered?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("registered" in data && data.registered != undefined) {
                    this.registered = data.registered;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get registered() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set registered(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            phone?: string;
            jid?: string;
            registered?: boolean;
        }): PhoneInfo {
            const message = new PhoneInfo({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.registered != null) {
                message.registered = data.registered;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
                jid?: string;
                registered?: boolean;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.registered != null) {
                data.registered = this.registered;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.registered != false)
                writer.writeBool(3, this.registered);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PhoneInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PhoneInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.registered = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PhoneInfo {
            return PhoneInfo.deserialize(bytes);
        }
    }
    export class CheckPhonesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            infos?: PhoneInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("infos" in data && data.infos != undefined) {
                    this.infos = data.infos;
                }
            }
        }
        get infos() {
            return pb_1.Message.getRepeatedWrapperField(this, PhoneInfo, 1) as PhoneInfo[];
        }
        set infos(value: PhoneInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            infos?: ReturnType<typeof PhoneInfo.prototype.toObject>[];
        }): CheckPhonesResponse {
            const message = new CheckPhonesResponse({});
            if (data.infos != null) {
                message.infos = data.infos.map(item => PhoneInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                infos?: ReturnType<typeof PhoneInfo.prototype.toObject>[];
            } = {};
            if (this.infos != null) {
                data.infos = this.infos.map((item: PhoneInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.infos.length)
                writer.writeRepeatedMessage(1, this.infos, (item: PhoneInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckPhonesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckPhonesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.infos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PhoneInfo.deserialize(reader), PhoneInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckPhonesResponse {
            return CheckPhonesResponse.deserialize(bytes);
        }
    }
    export class RevokeMessageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            sender?: string;
            messageId?: string;
            participants?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("messageId" in data && data.messageId != undefined) {
                    this.messageId = data.messageId;
                }
                if ("participants" in data && data.participants != undefined) {
                    this.participants = data.participants;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get messageId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set messageId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get participants() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set participants(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            sender?: string;
            messageId?: string;
            participants?: string[];
        }): RevokeMessageRequest {
            const message = new RevokeMessageRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.messageId != null) {
                message.messageId = data.messageId;
            }
            if (data.participants != null) {
                message.participants = data.participants;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                sender?: string;
                messageId?: string;
                participants?: string[];
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.messageId != null) {
                data.messageId = this.messageId;
            }
            if (this.participants != null) {
                data.participants = this.participants;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.sender.length)
                writer.writeString(3, this.sender);
            if (this.messageId.length)
                writer.writeString(4, this.messageId);
            if (this.participants.length)
                writer.writeRepeatedString(5, this.participants);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RevokeMessageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevokeMessageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.sender = reader.readString();
                        break;
                    case 4:
                        message.messageId = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RevokeMessageRequest {
            return RevokeMessageRequest.deserialize(bytes);
        }
    }
    export class EditMessageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            messageId?: string;
            text?: string;
            linkPreview?: boolean;
            linkPreviewHighQuality?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("messageId" in data && data.messageId != undefined) {
                    this.messageId = data.messageId;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("linkPreview" in data && data.linkPreview != undefined) {
                    this.linkPreview = data.linkPreview;
                }
                if ("linkPreviewHighQuality" in data && data.linkPreviewHighQuality != undefined) {
                    this.linkPreviewHighQuality = data.linkPreviewHighQuality;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get messageId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set messageId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get linkPreview() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set linkPreview(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get linkPreviewHighQuality() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set linkPreviewHighQuality(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            messageId?: string;
            text?: string;
            linkPreview?: boolean;
            linkPreviewHighQuality?: boolean;
        }): EditMessageRequest {
            const message = new EditMessageRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.messageId != null) {
                message.messageId = data.messageId;
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.linkPreview != null) {
                message.linkPreview = data.linkPreview;
            }
            if (data.linkPreviewHighQuality != null) {
                message.linkPreviewHighQuality = data.linkPreviewHighQuality;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                messageId?: string;
                text?: string;
                linkPreview?: boolean;
                linkPreviewHighQuality?: boolean;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.messageId != null) {
                data.messageId = this.messageId;
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.linkPreview != null) {
                data.linkPreview = this.linkPreview;
            }
            if (this.linkPreviewHighQuality != null) {
                data.linkPreviewHighQuality = this.linkPreviewHighQuality;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.messageId.length)
                writer.writeString(4, this.messageId);
            if (this.text.length)
                writer.writeString(5, this.text);
            if (this.linkPreview != false)
                writer.writeBool(6, this.linkPreview);
            if (this.linkPreviewHighQuality != false)
                writer.writeBool(7, this.linkPreviewHighQuality);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditMessageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditMessageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 4:
                        message.messageId = reader.readString();
                        break;
                    case 5:
                        message.text = reader.readString();
                        break;
                    case 6:
                        message.linkPreview = reader.readBool();
                        break;
                    case 7:
                        message.linkPreviewHighQuality = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditMessageRequest {
            return EditMessageRequest.deserialize(bytes);
        }
    }
    export class NewsletterListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
        }): NewsletterListRequest {
            const message = new NewsletterListRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsletterListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewsletterListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewsletterListRequest {
            return NewsletterListRequest.deserialize(bytes);
        }
    }
    export class Newsletter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            description?: string;
            invite?: string;
            preview?: string;
            picture?: string;
            verified?: boolean;
            role?: string;
            subscriberCount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("invite" in data && data.invite != undefined) {
                    this.invite = data.invite;
                }
                if ("preview" in data && data.preview != undefined) {
                    this.preview = data.preview;
                }
                if ("picture" in data && data.picture != undefined) {
                    this.picture = data.picture;
                }
                if ("verified" in data && data.verified != undefined) {
                    this.verified = data.verified;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("subscriberCount" in data && data.subscriberCount != undefined) {
                    this.subscriberCount = data.subscriberCount;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get invite() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set invite(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get preview() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set preview(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get picture() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set picture(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get verified() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set verified(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get subscriberCount() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set subscriberCount(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            invite?: string;
            preview?: string;
            picture?: string;
            verified?: boolean;
            role?: string;
            subscriberCount?: number;
        }): Newsletter {
            const message = new Newsletter({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.invite != null) {
                message.invite = data.invite;
            }
            if (data.preview != null) {
                message.preview = data.preview;
            }
            if (data.picture != null) {
                message.picture = data.picture;
            }
            if (data.verified != null) {
                message.verified = data.verified;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.subscriberCount != null) {
                message.subscriberCount = data.subscriberCount;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                invite?: string;
                preview?: string;
                picture?: string;
                verified?: boolean;
                role?: string;
                subscriberCount?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.invite != null) {
                data.invite = this.invite;
            }
            if (this.preview != null) {
                data.preview = this.preview;
            }
            if (this.picture != null) {
                data.picture = this.picture;
            }
            if (this.verified != null) {
                data.verified = this.verified;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.subscriberCount != null) {
                data.subscriberCount = this.subscriberCount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.invite.length)
                writer.writeString(4, this.invite);
            if (this.preview.length)
                writer.writeString(6, this.preview);
            if (this.picture.length)
                writer.writeString(5, this.picture);
            if (this.verified != false)
                writer.writeBool(7, this.verified);
            if (this.role.length)
                writer.writeString(8, this.role);
            if (this.subscriberCount != 0)
                writer.writeInt64(9, this.subscriberCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Newsletter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Newsletter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.invite = reader.readString();
                        break;
                    case 6:
                        message.preview = reader.readString();
                        break;
                    case 5:
                        message.picture = reader.readString();
                        break;
                    case 7:
                        message.verified = reader.readBool();
                        break;
                    case 8:
                        message.role = reader.readString();
                        break;
                    case 9:
                        message.subscriberCount = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Newsletter {
            return Newsletter.deserialize(bytes);
        }
    }
    export class NewsletterList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            newsletters?: Newsletter[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("newsletters" in data && data.newsletters != undefined) {
                    this.newsletters = data.newsletters;
                }
            }
        }
        get newsletters() {
            return pb_1.Message.getRepeatedWrapperField(this, Newsletter, 1) as Newsletter[];
        }
        set newsletters(value: Newsletter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            newsletters?: ReturnType<typeof Newsletter.prototype.toObject>[];
        }): NewsletterList {
            const message = new NewsletterList({});
            if (data.newsletters != null) {
                message.newsletters = data.newsletters.map(item => Newsletter.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                newsletters?: ReturnType<typeof Newsletter.prototype.toObject>[];
            } = {};
            if (this.newsletters != null) {
                data.newsletters = this.newsletters.map((item: Newsletter) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.newsletters.length)
                writer.writeRepeatedMessage(1, this.newsletters, (item: Newsletter) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsletterList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewsletterList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.newsletters, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Newsletter.deserialize(reader), Newsletter));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewsletterList {
            return NewsletterList.deserialize(bytes);
        }
    }
    export class NewsletterInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            id?: string;
        }): NewsletterInfoRequest {
            const message = new NewsletterInfoRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                id?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.id.length)
                writer.writeString(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsletterInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewsletterInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewsletterInfoRequest {
            return NewsletterInfoRequest.deserialize(bytes);
        }
    }
    export class GetNewsletterMessagesByInviteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            invite?: string;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("invite" in data && data.invite != undefined) {
                    this.invite = data.invite;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get invite() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set invite(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            invite?: string;
            limit?: number;
        }): GetNewsletterMessagesByInviteRequest {
            const message = new GetNewsletterMessagesByInviteRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.invite != null) {
                message.invite = data.invite;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                invite?: string;
                limit?: number;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.invite != null) {
                data.invite = this.invite;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.invite.length)
                writer.writeString(2, this.invite);
            if (this.limit != 0)
                writer.writeInt64(3, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNewsletterMessagesByInviteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNewsletterMessagesByInviteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.invite = reader.readString();
                        break;
                    case 3:
                        message.limit = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNewsletterMessagesByInviteRequest {
            return GetNewsletterMessagesByInviteRequest.deserialize(bytes);
        }
    }
    export class SearchPage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: number;
            startCursor?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("startCursor" in data && data.startCursor != undefined) {
                    this.startCursor = data.startCursor;
                }
            }
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get startCursor() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set startCursor(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            limit?: number;
            startCursor?: string;
        }): SearchPage {
            const message = new SearchPage({});
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.startCursor != null) {
                message.startCursor = data.startCursor;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: number;
                startCursor?: string;
            } = {};
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.startCursor != null) {
                data.startCursor = this.startCursor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.limit != 0)
                writer.writeUint64(2, this.limit);
            if (this.startCursor.length)
                writer.writeString(3, this.startCursor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchPage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchPage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.limit = reader.readUint64();
                        break;
                    case 3:
                        message.startCursor = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchPage {
            return SearchPage.deserialize(bytes);
        }
    }
    export class SearchNewslettersByViewRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            page?: SearchPage;
            view?: string;
            categories?: string[];
            countries?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("view" in data && data.view != undefined) {
                    this.view = data.view;
                }
                if ("categories" in data && data.categories != undefined) {
                    this.categories = data.categories;
                }
                if ("countries" in data && data.countries != undefined) {
                    this.countries = data.countries;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get page() {
            return pb_1.Message.getWrapperField(this, SearchPage, 2) as SearchPage;
        }
        set page(value: SearchPage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get view() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set view(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get categories() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set categories(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get countries() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set countries(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            page?: ReturnType<typeof SearchPage.prototype.toObject>;
            view?: string;
            categories?: string[];
            countries?: string[];
        }): SearchNewslettersByViewRequest {
            const message = new SearchNewslettersByViewRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.page != null) {
                message.page = SearchPage.fromObject(data.page);
            }
            if (data.view != null) {
                message.view = data.view;
            }
            if (data.categories != null) {
                message.categories = data.categories;
            }
            if (data.countries != null) {
                message.countries = data.countries;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                page?: ReturnType<typeof SearchPage.prototype.toObject>;
                view?: string;
                categories?: string[];
                countries?: string[];
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            if (this.view != null) {
                data.view = this.view;
            }
            if (this.categories != null) {
                data.categories = this.categories;
            }
            if (this.countries != null) {
                data.countries = this.countries;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.has_page)
                writer.writeMessage(2, this.page, () => this.page.serialize(writer));
            if (this.view.length)
                writer.writeString(3, this.view);
            if (this.categories.length)
                writer.writeRepeatedString(4, this.categories);
            if (this.countries.length)
                writer.writeRepeatedString(5, this.countries);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchNewslettersByViewRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchNewslettersByViewRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.page, () => message.page = SearchPage.deserialize(reader));
                        break;
                    case 3:
                        message.view = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchNewslettersByViewRequest {
            return SearchNewslettersByViewRequest.deserialize(bytes);
        }
    }
    export class SearchNewslettersByTextRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            page?: SearchPage;
            text?: string;
            categories?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("categories" in data && data.categories != undefined) {
                    this.categories = data.categories;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get page() {
            return pb_1.Message.getWrapperField(this, SearchPage, 2) as SearchPage;
        }
        set page(value: SearchPage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get categories() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set categories(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            page?: ReturnType<typeof SearchPage.prototype.toObject>;
            text?: string;
            categories?: string[];
        }): SearchNewslettersByTextRequest {
            const message = new SearchNewslettersByTextRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.page != null) {
                message.page = SearchPage.fromObject(data.page);
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.categories != null) {
                message.categories = data.categories;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                page?: ReturnType<typeof SearchPage.prototype.toObject>;
                text?: string;
                categories?: string[];
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.categories != null) {
                data.categories = this.categories;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.has_page)
                writer.writeMessage(2, this.page, () => this.page.serialize(writer));
            if (this.text.length)
                writer.writeString(3, this.text);
            if (this.categories.length)
                writer.writeRepeatedString(4, this.categories);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchNewslettersByTextRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchNewslettersByTextRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.page, () => message.page = SearchPage.deserialize(reader));
                        break;
                    case 3:
                        message.text = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchNewslettersByTextRequest {
            return SearchNewslettersByTextRequest.deserialize(bytes);
        }
    }
    export class SearchPageResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            startCursor?: string;
            endCursor?: string;
            hasNextPage?: boolean;
            hasPreviousPage?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("startCursor" in data && data.startCursor != undefined) {
                    this.startCursor = data.startCursor;
                }
                if ("endCursor" in data && data.endCursor != undefined) {
                    this.endCursor = data.endCursor;
                }
                if ("hasNextPage" in data && data.hasNextPage != undefined) {
                    this.hasNextPage = data.hasNextPage;
                }
                if ("hasPreviousPage" in data && data.hasPreviousPage != undefined) {
                    this.hasPreviousPage = data.hasPreviousPage;
                }
            }
        }
        get startCursor() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set startCursor(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get endCursor() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set endCursor(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasNextPage() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set hasNextPage(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get hasPreviousPage() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set hasPreviousPage(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            startCursor?: string;
            endCursor?: string;
            hasNextPage?: boolean;
            hasPreviousPage?: boolean;
        }): SearchPageResult {
            const message = new SearchPageResult({});
            if (data.startCursor != null) {
                message.startCursor = data.startCursor;
            }
            if (data.endCursor != null) {
                message.endCursor = data.endCursor;
            }
            if (data.hasNextPage != null) {
                message.hasNextPage = data.hasNextPage;
            }
            if (data.hasPreviousPage != null) {
                message.hasPreviousPage = data.hasPreviousPage;
            }
            return message;
        }
        toObject() {
            const data: {
                startCursor?: string;
                endCursor?: string;
                hasNextPage?: boolean;
                hasPreviousPage?: boolean;
            } = {};
            if (this.startCursor != null) {
                data.startCursor = this.startCursor;
            }
            if (this.endCursor != null) {
                data.endCursor = this.endCursor;
            }
            if (this.hasNextPage != null) {
                data.hasNextPage = this.hasNextPage;
            }
            if (this.hasPreviousPage != null) {
                data.hasPreviousPage = this.hasPreviousPage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.startCursor.length)
                writer.writeString(1, this.startCursor);
            if (this.endCursor.length)
                writer.writeString(2, this.endCursor);
            if (this.hasNextPage != false)
                writer.writeBool(3, this.hasNextPage);
            if (this.hasPreviousPage != false)
                writer.writeBool(4, this.hasPreviousPage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchPageResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchPageResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.startCursor = reader.readString();
                        break;
                    case 2:
                        message.endCursor = reader.readString();
                        break;
                    case 3:
                        message.hasNextPage = reader.readBool();
                        break;
                    case 4:
                        message.hasPreviousPage = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchPageResult {
            return SearchPageResult.deserialize(bytes);
        }
    }
    export class NewsletterSearchPageResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: SearchPageResult;
            newsletters?: NewsletterList;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("newsletters" in data && data.newsletters != undefined) {
                    this.newsletters = data.newsletters;
                }
            }
        }
        get page() {
            return pb_1.Message.getWrapperField(this, SearchPageResult, 1) as SearchPageResult;
        }
        set page(value: SearchPageResult) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get newsletters() {
            return pb_1.Message.getWrapperField(this, NewsletterList, 2) as NewsletterList;
        }
        set newsletters(value: NewsletterList) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_newsletters() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            page?: ReturnType<typeof SearchPageResult.prototype.toObject>;
            newsletters?: ReturnType<typeof NewsletterList.prototype.toObject>;
        }): NewsletterSearchPageResult {
            const message = new NewsletterSearchPageResult({});
            if (data.page != null) {
                message.page = SearchPageResult.fromObject(data.page);
            }
            if (data.newsletters != null) {
                message.newsletters = NewsletterList.fromObject(data.newsletters);
            }
            return message;
        }
        toObject() {
            const data: {
                page?: ReturnType<typeof SearchPageResult.prototype.toObject>;
                newsletters?: ReturnType<typeof NewsletterList.prototype.toObject>;
            } = {};
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            if (this.newsletters != null) {
                data.newsletters = this.newsletters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_page)
                writer.writeMessage(1, this.page, () => this.page.serialize(writer));
            if (this.has_newsletters)
                writer.writeMessage(2, this.newsletters, () => this.newsletters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsletterSearchPageResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewsletterSearchPageResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.page, () => message.page = SearchPageResult.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.newsletters, () => message.newsletters = NewsletterList.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewsletterSearchPageResult {
            return NewsletterSearchPageResult.deserialize(bytes);
        }
    }
    export class CreateNewsletterRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            name?: string;
            description?: string;
            picture?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("picture" in data && data.picture != undefined) {
                    this.picture = data.picture;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get picture() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set picture(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            name?: string;
            description?: string;
            picture?: Uint8Array;
        }): CreateNewsletterRequest {
            const message = new CreateNewsletterRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.picture != null) {
                message.picture = data.picture;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                name?: string;
                description?: string;
                picture?: Uint8Array;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.picture != null) {
                data.picture = this.picture;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.picture.length)
                writer.writeBytes(4, this.picture);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateNewsletterRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateNewsletterRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.picture = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateNewsletterRequest {
            return CreateNewsletterRequest.deserialize(bytes);
        }
    }
    export class NewsletterToggleMuteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            mute?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("mute" in data && data.mute != undefined) {
                    this.mute = data.mute;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get mute() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set mute(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            mute?: boolean;
        }): NewsletterToggleMuteRequest {
            const message = new NewsletterToggleMuteRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.mute != null) {
                message.mute = data.mute;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                mute?: boolean;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.mute != null) {
                data.mute = this.mute;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.mute != false)
                writer.writeBool(3, this.mute);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsletterToggleMuteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewsletterToggleMuteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.mute = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewsletterToggleMuteRequest {
            return NewsletterToggleMuteRequest.deserialize(bytes);
        }
    }
    export class NewsletterToggleFollowRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            jid?: string;
            follow?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("follow" in data && data.follow != undefined) {
                    this.follow = data.follow;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get jid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get follow() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set follow(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            jid?: string;
            follow?: boolean;
        }): NewsletterToggleFollowRequest {
            const message = new NewsletterToggleFollowRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.jid != null) {
                message.jid = data.jid;
            }
            if (data.follow != null) {
                message.follow = data.follow;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                jid?: string;
                follow?: boolean;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.jid != null) {
                data.jid = this.jid;
            }
            if (this.follow != null) {
                data.follow = this.follow;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.jid.length)
                writer.writeString(2, this.jid);
            if (this.follow != false)
                writer.writeBool(3, this.follow);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsletterToggleFollowRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewsletterToggleFollowRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.jid = reader.readString();
                        break;
                    case 3:
                        message.follow = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewsletterToggleFollowRequest {
            return NewsletterToggleFollowRequest.deserialize(bytes);
        }
    }
    export class DownloadMediaRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            message?: string;
        }): DownloadMediaRequest {
            const message = new DownloadMediaRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                message?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadMediaRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadMediaRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DownloadMediaRequest {
            return DownloadMediaRequest.deserialize(bytes);
        }
    }
    export class DownloadMediaResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set content(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            content?: Uint8Array;
        }): DownloadMediaResponse {
            const message = new DownloadMediaResponse({});
            if (data.content != null) {
                message.content = data.content;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: Uint8Array;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeBytes(1, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadMediaResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadMediaResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DownloadMediaResponse {
            return DownloadMediaResponse.deserialize(bytes);
        }
    }
    export class EntityByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            id?: string;
        }): EntityByIdRequest {
            const message = new EntityByIdRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                id?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.id.length)
                writer.writeString(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntityByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntityByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EntityByIdRequest {
            return EntityByIdRequest.deserialize(bytes);
        }
    }
    export class Json extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: string;
        }): Json {
            const message = new Json({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: string;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeString(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Json {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Json();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Json {
            return Json.deserialize(bytes);
        }
    }
    export class JsonList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            elements?: Json[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("elements" in data && data.elements != undefined) {
                    this.elements = data.elements;
                }
            }
        }
        get elements() {
            return pb_1.Message.getRepeatedWrapperField(this, Json, 1) as Json[];
        }
        set elements(value: Json[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            elements?: ReturnType<typeof Json.prototype.toObject>[];
        }): JsonList {
            const message = new JsonList({});
            if (data.elements != null) {
                message.elements = data.elements.map(item => Json.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                elements?: ReturnType<typeof Json.prototype.toObject>[];
            } = {};
            if (this.elements != null) {
                data.elements = this.elements.map((item: Json) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.elements.length)
                writer.writeRepeatedMessage(1, this.elements, (item: Json) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JsonList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JsonList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.elements, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Json.deserialize(reader), Json));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JsonList {
            return JsonList.deserialize(bytes);
        }
    }
    export class Pagination extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: number;
            offset?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
            }
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            limit?: number;
            offset?: number;
        }): Pagination {
            const message = new Pagination({});
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: number;
                offset?: number;
            } = {};
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.limit != 0)
                writer.writeUint64(1, this.limit);
            if (this.offset != 0)
                writer.writeUint64(2, this.offset);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pagination {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pagination();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.limit = reader.readUint64();
                        break;
                    case 2:
                        message.offset = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Pagination {
            return Pagination.deserialize(bytes);
        }
    }
    export class SortBy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            field?: string;
            order?: SortBy.Order;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set field(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get order() {
            return pb_1.Message.getFieldWithDefault(this, 2, SortBy.Order.ASC) as SortBy.Order;
        }
        set order(value: SortBy.Order) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            field?: string;
            order?: SortBy.Order;
        }): SortBy {
            const message = new SortBy({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.order != null) {
                message.order = data.order;
            }
            return message;
        }
        toObject() {
            const data: {
                field?: string;
                order?: SortBy.Order;
            } = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.order != null) {
                data.order = this.order;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.order != SortBy.Order.ASC)
                writer.writeEnum(2, this.order);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SortBy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SortBy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.order = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SortBy {
            return SortBy.deserialize(bytes);
        }
    }
    export namespace SortBy {
        export enum Order {
            ASC = 0,
            DESC = 1
        }
    }
    export class MessageFilters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            jid?: OptionalString;
            timestampGte?: OptionalUInt64;
            timestampLte?: OptionalUInt64;
            fromMe?: OptionalBool;
            status?: OptionalUInt32;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("jid" in data && data.jid != undefined) {
                    this.jid = data.jid;
                }
                if ("timestampGte" in data && data.timestampGte != undefined) {
                    this.timestampGte = data.timestampGte;
                }
                if ("timestampLte" in data && data.timestampLte != undefined) {
                    this.timestampLte = data.timestampLte;
                }
                if ("fromMe" in data && data.fromMe != undefined) {
                    this.fromMe = data.fromMe;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get jid() {
            return pb_1.Message.getWrapperField(this, OptionalString, 1) as OptionalString;
        }
        set jid(value: OptionalString) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_jid() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get timestampGte() {
            return pb_1.Message.getWrapperField(this, OptionalUInt64, 2) as OptionalUInt64;
        }
        set timestampGte(value: OptionalUInt64) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_timestampGte() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get timestampLte() {
            return pb_1.Message.getWrapperField(this, OptionalUInt64, 3) as OptionalUInt64;
        }
        set timestampLte(value: OptionalUInt64) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_timestampLte() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get fromMe() {
            return pb_1.Message.getWrapperField(this, OptionalBool, 4) as OptionalBool;
        }
        set fromMe(value: OptionalBool) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_fromMe() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get status() {
            return pb_1.Message.getWrapperField(this, OptionalUInt32, 5) as OptionalUInt32;
        }
        set status(value: OptionalUInt32) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            jid?: ReturnType<typeof OptionalString.prototype.toObject>;
            timestampGte?: ReturnType<typeof OptionalUInt64.prototype.toObject>;
            timestampLte?: ReturnType<typeof OptionalUInt64.prototype.toObject>;
            fromMe?: ReturnType<typeof OptionalBool.prototype.toObject>;
            status?: ReturnType<typeof OptionalUInt32.prototype.toObject>;
        }): MessageFilters {
            const message = new MessageFilters({});
            if (data.jid != null) {
                message.jid = OptionalString.fromObject(data.jid);
            }
            if (data.timestampGte != null) {
                message.timestampGte = OptionalUInt64.fromObject(data.timestampGte);
            }
            if (data.timestampLte != null) {
                message.timestampLte = OptionalUInt64.fromObject(data.timestampLte);
            }
            if (data.fromMe != null) {
                message.fromMe = OptionalBool.fromObject(data.fromMe);
            }
            if (data.status != null) {
                message.status = OptionalUInt32.fromObject(data.status);
            }
            return message;
        }
        toObject() {
            const data: {
                jid?: ReturnType<typeof OptionalString.prototype.toObject>;
                timestampGte?: ReturnType<typeof OptionalUInt64.prototype.toObject>;
                timestampLte?: ReturnType<typeof OptionalUInt64.prototype.toObject>;
                fromMe?: ReturnType<typeof OptionalBool.prototype.toObject>;
                status?: ReturnType<typeof OptionalUInt32.prototype.toObject>;
            } = {};
            if (this.jid != null) {
                data.jid = this.jid.toObject();
            }
            if (this.timestampGte != null) {
                data.timestampGte = this.timestampGte.toObject();
            }
            if (this.timestampLte != null) {
                data.timestampLte = this.timestampLte.toObject();
            }
            if (this.fromMe != null) {
                data.fromMe = this.fromMe.toObject();
            }
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_jid)
                writer.writeMessage(1, this.jid, () => this.jid.serialize(writer));
            if (this.has_timestampGte)
                writer.writeMessage(2, this.timestampGte, () => this.timestampGte.serialize(writer));
            if (this.has_timestampLte)
                writer.writeMessage(3, this.timestampLte, () => this.timestampLte.serialize(writer));
            if (this.has_fromMe)
                writer.writeMessage(4, this.fromMe, () => this.fromMe.serialize(writer));
            if (this.has_status)
                writer.writeMessage(5, this.status, () => this.status.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageFilters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageFilters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.jid, () => message.jid = OptionalString.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.timestampGte, () => message.timestampGte = OptionalUInt64.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.timestampLte, () => message.timestampLte = OptionalUInt64.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.fromMe, () => message.fromMe = OptionalBool.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.status, () => message.status = OptionalUInt32.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageFilters {
            return MessageFilters.deserialize(bytes);
        }
    }
    export class GetMessagesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            filters?: MessageFilters;
            pagination?: Pagination;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, MessageFilters, 2) as MessageFilters;
        }
        set filters(value: MessageFilters) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, Pagination, 3) as Pagination;
        }
        set pagination(value: Pagination) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            filters?: ReturnType<typeof MessageFilters.prototype.toObject>;
            pagination?: ReturnType<typeof Pagination.prototype.toObject>;
        }): GetMessagesRequest {
            const message = new GetMessagesRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.filters != null) {
                message.filters = MessageFilters.fromObject(data.filters);
            }
            if (data.pagination != null) {
                message.pagination = Pagination.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                filters?: ReturnType<typeof MessageFilters.prototype.toObject>;
                pagination?: ReturnType<typeof Pagination.prototype.toObject>;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.has_filters)
                writer.writeMessage(2, this.filters, () => this.filters.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMessagesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMessagesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.filters, () => message.filters = MessageFilters.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMessagesRequest {
            return GetMessagesRequest.deserialize(bytes);
        }
    }
    export class GetContactsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            sortBy?: SortBy;
            pagination?: Pagination;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("sortBy" in data && data.sortBy != undefined) {
                    this.sortBy = data.sortBy;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sortBy() {
            return pb_1.Message.getWrapperField(this, SortBy, 2) as SortBy;
        }
        set sortBy(value: SortBy) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_sortBy() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, Pagination, 3) as Pagination;
        }
        set pagination(value: Pagination) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            sortBy?: ReturnType<typeof SortBy.prototype.toObject>;
            pagination?: ReturnType<typeof Pagination.prototype.toObject>;
        }): GetContactsRequest {
            const message = new GetContactsRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.sortBy != null) {
                message.sortBy = SortBy.fromObject(data.sortBy);
            }
            if (data.pagination != null) {
                message.pagination = Pagination.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                sortBy?: ReturnType<typeof SortBy.prototype.toObject>;
                pagination?: ReturnType<typeof Pagination.prototype.toObject>;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.sortBy != null) {
                data.sortBy = this.sortBy.toObject();
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.has_sortBy)
                writer.writeMessage(2, this.sortBy, () => this.sortBy.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetContactsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetContactsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.sortBy, () => message.sortBy = SortBy.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetContactsRequest {
            return GetContactsRequest.deserialize(bytes);
        }
    }
    export class GetChatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: Session;
            sortBy?: SortBy;
            pagination?: Pagination;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("sortBy" in data && data.sortBy != undefined) {
                    this.sortBy = data.sortBy;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get session() {
            return pb_1.Message.getWrapperField(this, Session, 1) as Session;
        }
        set session(value: Session) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sortBy() {
            return pb_1.Message.getWrapperField(this, SortBy, 2) as SortBy;
        }
        set sortBy(value: SortBy) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_sortBy() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, Pagination, 3) as Pagination;
        }
        set pagination(value: Pagination) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            session?: ReturnType<typeof Session.prototype.toObject>;
            sortBy?: ReturnType<typeof SortBy.prototype.toObject>;
            pagination?: ReturnType<typeof Pagination.prototype.toObject>;
        }): GetChatsRequest {
            const message = new GetChatsRequest({});
            if (data.session != null) {
                message.session = Session.fromObject(data.session);
            }
            if (data.sortBy != null) {
                message.sortBy = SortBy.fromObject(data.sortBy);
            }
            if (data.pagination != null) {
                message.pagination = Pagination.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                session?: ReturnType<typeof Session.prototype.toObject>;
                sortBy?: ReturnType<typeof SortBy.prototype.toObject>;
                pagination?: ReturnType<typeof Pagination.prototype.toObject>;
            } = {};
            if (this.session != null) {
                data.session = this.session.toObject();
            }
            if (this.sortBy != null) {
                data.sortBy = this.sortBy.toObject();
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session)
                writer.writeMessage(1, this.session, () => this.session.serialize(writer));
            if (this.has_sortBy)
                writer.writeMessage(2, this.sortBy, () => this.sortBy.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetChatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetChatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session, () => message.session = Session.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.sortBy, () => message.sortBy = SortBy.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetChatsRequest {
            return GetChatsRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedEventStreamService {
        static definition = {
            StreamEvents: {
                path: "/messages.EventStream/StreamEvents",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: Session) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Session.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EventJson) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EventJson.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract StreamEvents(call: grpc_1.ServerWritableStream<Session, EventJson>): void;
    }
    export class EventStreamClient extends grpc_1.makeGenericClientConstructor(UnimplementedEventStreamService.definition, "EventStream", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        StreamEvents: GrpcStreamServiceInterface<Session, EventJson> = (message: Session, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<EventJson> => {
            return super.StreamEvents(message, metadata, options);
        };
    }
    export abstract class UnimplementedMessageServiceService {
        static definition = {
            StartSession: {
                path: "/messages.MessageService/StartSession",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: StartSessionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StartSessionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            StopSession: {
                path: "/messages.MessageService/StopSession",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Session) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Session.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            GetSessionState: {
                path: "/messages.MessageService/GetSessionState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Session) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Session.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SessionStateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SessionStateResponse.deserialize(new Uint8Array(bytes))
            },
            RequestCode: {
                path: "/messages.MessageService/RequestCode",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PairCodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PairCodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PairCodeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PairCodeResponse.deserialize(new Uint8Array(bytes))
            },
            Logout: {
                path: "/messages.MessageService/Logout",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Session) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Session.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            SetProfileName: {
                path: "/messages.MessageService/SetProfileName",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ProfileNameRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ProfileNameRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            SetProfileStatus: {
                path: "/messages.MessageService/SetProfileStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ProfileStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ProfileStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            SetProfilePicture: {
                path: "/messages.MessageService/SetProfilePicture",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetProfilePictureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetProfilePictureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            FetchGroups: {
                path: "/messages.MessageService/FetchGroups",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Session) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Session.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            GetGroups: {
                path: "/messages.MessageService/GetGroups",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Session) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Session.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JsonList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JsonList.deserialize(new Uint8Array(bytes))
            },
            GetGroupInfo: {
                path: "/messages.MessageService/GetGroupInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JidRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JidRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Json) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Json.deserialize(new Uint8Array(bytes))
            },
            CreateGroup: {
                path: "/messages.MessageService/CreateGroup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateGroupRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateGroupRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Json) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Json.deserialize(new Uint8Array(bytes))
            },
            LeaveGroup: {
                path: "/messages.MessageService/LeaveGroup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JidRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JidRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            GetGroupInviteLink: {
                path: "/messages.MessageService/GetGroupInviteLink",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JidRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JidRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: OptionalString) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => OptionalString.deserialize(new Uint8Array(bytes))
            },
            RevokeGroupInviteLink: {
                path: "/messages.MessageService/RevokeGroupInviteLink",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JidRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JidRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: OptionalString) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => OptionalString.deserialize(new Uint8Array(bytes))
            },
            GetGroupInfoFromLink: {
                path: "/messages.MessageService/GetGroupInfoFromLink",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GroupCodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GroupCodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Json) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Json.deserialize(new Uint8Array(bytes))
            },
            JoinGroupWithLink: {
                path: "/messages.MessageService/JoinGroupWithLink",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GroupCodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GroupCodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Json) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Json.deserialize(new Uint8Array(bytes))
            },
            SetGroupName: {
                path: "/messages.MessageService/SetGroupName",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JidStringRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JidStringRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            SetGroupDescription: {
                path: "/messages.MessageService/SetGroupDescription",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JidStringRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JidStringRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            SetGroupPicture: {
                path: "/messages.MessageService/SetGroupPicture",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetPictureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetPictureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            SetGroupLocked: {
                path: "/messages.MessageService/SetGroupLocked",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JidBoolRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JidBoolRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            SetGroupAnnounce: {
                path: "/messages.MessageService/SetGroupAnnounce",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JidBoolRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JidBoolRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            UpdateGroupParticipants: {
                path: "/messages.MessageService/UpdateGroupParticipants",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateParticipantsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateParticipantsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JsonList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JsonList.deserialize(new Uint8Array(bytes))
            },
            GetProfilePicture: {
                path: "/messages.MessageService/GetProfilePicture",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ProfilePictureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ProfilePictureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ProfilePictureResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ProfilePictureResponse.deserialize(new Uint8Array(bytes))
            },
            SendPresence: {
                path: "/messages.MessageService/SendPresence",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PresenceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PresenceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            SendChatPresence: {
                path: "/messages.MessageService/SendChatPresence",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatPresenceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatPresenceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            SubscribePresence: {
                path: "/messages.MessageService/SubscribePresence",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SubscribePresenceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SubscribePresenceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            CheckPhones: {
                path: "/messages.MessageService/CheckPhones",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckPhonesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckPhonesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckPhonesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckPhonesResponse.deserialize(new Uint8Array(bytes))
            },
            GenerateNewMessageID: {
                path: "/messages.MessageService/GenerateNewMessageID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Session) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Session.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NewMessageIDResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NewMessageIDResponse.deserialize(new Uint8Array(bytes))
            },
            SendMessage: {
                path: "/messages.MessageService/SendMessage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageResponse.deserialize(new Uint8Array(bytes))
            },
            SendReaction: {
                path: "/messages.MessageService/SendReaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageReaction) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageReaction.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageResponse.deserialize(new Uint8Array(bytes))
            },
            MarkRead: {
                path: "/messages.MessageService/MarkRead",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MarkReadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MarkReadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            EditMessage: {
                path: "/messages.MessageService/EditMessage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EditMessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EditMessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageResponse.deserialize(new Uint8Array(bytes))
            },
            RevokeMessage: {
                path: "/messages.MessageService/RevokeMessage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RevokeMessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RevokeMessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageResponse.deserialize(new Uint8Array(bytes))
            },
            SendButtonReply: {
                path: "/messages.MessageService/SendButtonReply",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ButtonReplyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ButtonReplyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageResponse.deserialize(new Uint8Array(bytes))
            },
            GetSubscribedNewsletters: {
                path: "/messages.MessageService/GetSubscribedNewsletters",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NewsletterListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NewsletterListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NewsletterList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NewsletterList.deserialize(new Uint8Array(bytes))
            },
            GetNewsletterInfo: {
                path: "/messages.MessageService/GetNewsletterInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NewsletterInfoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NewsletterInfoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Newsletter) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Newsletter.deserialize(new Uint8Array(bytes))
            },
            GetNewsletterMessagesByInvite: {
                path: "/messages.MessageService/GetNewsletterMessagesByInvite",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetNewsletterMessagesByInviteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetNewsletterMessagesByInviteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Json) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Json.deserialize(new Uint8Array(bytes))
            },
            SearchNewslettersByView: {
                path: "/messages.MessageService/SearchNewslettersByView",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SearchNewslettersByViewRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SearchNewslettersByViewRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NewsletterSearchPageResult) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NewsletterSearchPageResult.deserialize(new Uint8Array(bytes))
            },
            SearchNewslettersByText: {
                path: "/messages.MessageService/SearchNewslettersByText",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SearchNewslettersByTextRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SearchNewslettersByTextRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NewsletterSearchPageResult) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NewsletterSearchPageResult.deserialize(new Uint8Array(bytes))
            },
            CreateNewsletter: {
                path: "/messages.MessageService/CreateNewsletter",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateNewsletterRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateNewsletterRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Newsletter) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Newsletter.deserialize(new Uint8Array(bytes))
            },
            NewsletterToggleMute: {
                path: "/messages.MessageService/NewsletterToggleMute",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NewsletterToggleMuteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NewsletterToggleMuteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            NewsletterToggleFollow: {
                path: "/messages.MessageService/NewsletterToggleFollow",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NewsletterToggleFollowRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NewsletterToggleFollowRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            DownloadMedia: {
                path: "/messages.MessageService/DownloadMedia",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DownloadMediaRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DownloadMediaRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DownloadMediaResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DownloadMediaResponse.deserialize(new Uint8Array(bytes))
            },
            GetMessageById: {
                path: "/messages.MessageService/GetMessageById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EntityByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EntityByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Json) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Json.deserialize(new Uint8Array(bytes))
            },
            GetMessages: {
                path: "/messages.MessageService/GetMessages",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetMessagesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetMessagesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JsonList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JsonList.deserialize(new Uint8Array(bytes))
            },
            GetContacts: {
                path: "/messages.MessageService/GetContacts",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetContactsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetContactsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JsonList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JsonList.deserialize(new Uint8Array(bytes))
            },
            GetContactById: {
                path: "/messages.MessageService/GetContactById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EntityByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EntityByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Json) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Json.deserialize(new Uint8Array(bytes))
            },
            GetChats: {
                path: "/messages.MessageService/GetChats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetChatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetChatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JsonList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JsonList.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract StartSession(call: grpc_1.ServerUnaryCall<StartSessionRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract StopSession(call: grpc_1.ServerUnaryCall<Session, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract GetSessionState(call: grpc_1.ServerUnaryCall<Session, SessionStateResponse>, callback: grpc_1.sendUnaryData<SessionStateResponse>): void;
        abstract RequestCode(call: grpc_1.ServerUnaryCall<PairCodeRequest, PairCodeResponse>, callback: grpc_1.sendUnaryData<PairCodeResponse>): void;
        abstract Logout(call: grpc_1.ServerUnaryCall<Session, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract SetProfileName(call: grpc_1.ServerUnaryCall<ProfileNameRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract SetProfileStatus(call: grpc_1.ServerUnaryCall<ProfileStatusRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract SetProfilePicture(call: grpc_1.ServerUnaryCall<SetProfilePictureRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract FetchGroups(call: grpc_1.ServerUnaryCall<Session, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract GetGroups(call: grpc_1.ServerUnaryCall<Session, JsonList>, callback: grpc_1.sendUnaryData<JsonList>): void;
        abstract GetGroupInfo(call: grpc_1.ServerUnaryCall<JidRequest, Json>, callback: grpc_1.sendUnaryData<Json>): void;
        abstract CreateGroup(call: grpc_1.ServerUnaryCall<CreateGroupRequest, Json>, callback: grpc_1.sendUnaryData<Json>): void;
        abstract LeaveGroup(call: grpc_1.ServerUnaryCall<JidRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract GetGroupInviteLink(call: grpc_1.ServerUnaryCall<JidRequest, OptionalString>, callback: grpc_1.sendUnaryData<OptionalString>): void;
        abstract RevokeGroupInviteLink(call: grpc_1.ServerUnaryCall<JidRequest, OptionalString>, callback: grpc_1.sendUnaryData<OptionalString>): void;
        abstract GetGroupInfoFromLink(call: grpc_1.ServerUnaryCall<GroupCodeRequest, Json>, callback: grpc_1.sendUnaryData<Json>): void;
        abstract JoinGroupWithLink(call: grpc_1.ServerUnaryCall<GroupCodeRequest, Json>, callback: grpc_1.sendUnaryData<Json>): void;
        abstract SetGroupName(call: grpc_1.ServerUnaryCall<JidStringRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract SetGroupDescription(call: grpc_1.ServerUnaryCall<JidStringRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract SetGroupPicture(call: grpc_1.ServerUnaryCall<SetPictureRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract SetGroupLocked(call: grpc_1.ServerUnaryCall<JidBoolRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract SetGroupAnnounce(call: grpc_1.ServerUnaryCall<JidBoolRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract UpdateGroupParticipants(call: grpc_1.ServerUnaryCall<UpdateParticipantsRequest, JsonList>, callback: grpc_1.sendUnaryData<JsonList>): void;
        abstract GetProfilePicture(call: grpc_1.ServerUnaryCall<ProfilePictureRequest, ProfilePictureResponse>, callback: grpc_1.sendUnaryData<ProfilePictureResponse>): void;
        abstract SendPresence(call: grpc_1.ServerUnaryCall<PresenceRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract SendChatPresence(call: grpc_1.ServerUnaryCall<ChatPresenceRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract SubscribePresence(call: grpc_1.ServerUnaryCall<SubscribePresenceRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract CheckPhones(call: grpc_1.ServerUnaryCall<CheckPhonesRequest, CheckPhonesResponse>, callback: grpc_1.sendUnaryData<CheckPhonesResponse>): void;
        abstract GenerateNewMessageID(call: grpc_1.ServerUnaryCall<Session, NewMessageIDResponse>, callback: grpc_1.sendUnaryData<NewMessageIDResponse>): void;
        abstract SendMessage(call: grpc_1.ServerUnaryCall<MessageRequest, MessageResponse>, callback: grpc_1.sendUnaryData<MessageResponse>): void;
        abstract SendReaction(call: grpc_1.ServerUnaryCall<MessageReaction, MessageResponse>, callback: grpc_1.sendUnaryData<MessageResponse>): void;
        abstract MarkRead(call: grpc_1.ServerUnaryCall<MarkReadRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract EditMessage(call: grpc_1.ServerUnaryCall<EditMessageRequest, MessageResponse>, callback: grpc_1.sendUnaryData<MessageResponse>): void;
        abstract RevokeMessage(call: grpc_1.ServerUnaryCall<RevokeMessageRequest, MessageResponse>, callback: grpc_1.sendUnaryData<MessageResponse>): void;
        abstract SendButtonReply(call: grpc_1.ServerUnaryCall<ButtonReplyRequest, MessageResponse>, callback: grpc_1.sendUnaryData<MessageResponse>): void;
        abstract GetSubscribedNewsletters(call: grpc_1.ServerUnaryCall<NewsletterListRequest, NewsletterList>, callback: grpc_1.sendUnaryData<NewsletterList>): void;
        abstract GetNewsletterInfo(call: grpc_1.ServerUnaryCall<NewsletterInfoRequest, Newsletter>, callback: grpc_1.sendUnaryData<Newsletter>): void;
        abstract GetNewsletterMessagesByInvite(call: grpc_1.ServerUnaryCall<GetNewsletterMessagesByInviteRequest, Json>, callback: grpc_1.sendUnaryData<Json>): void;
        abstract SearchNewslettersByView(call: grpc_1.ServerUnaryCall<SearchNewslettersByViewRequest, NewsletterSearchPageResult>, callback: grpc_1.sendUnaryData<NewsletterSearchPageResult>): void;
        abstract SearchNewslettersByText(call: grpc_1.ServerUnaryCall<SearchNewslettersByTextRequest, NewsletterSearchPageResult>, callback: grpc_1.sendUnaryData<NewsletterSearchPageResult>): void;
        abstract CreateNewsletter(call: grpc_1.ServerUnaryCall<CreateNewsletterRequest, Newsletter>, callback: grpc_1.sendUnaryData<Newsletter>): void;
        abstract NewsletterToggleMute(call: grpc_1.ServerUnaryCall<NewsletterToggleMuteRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract NewsletterToggleFollow(call: grpc_1.ServerUnaryCall<NewsletterToggleFollowRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract DownloadMedia(call: grpc_1.ServerUnaryCall<DownloadMediaRequest, DownloadMediaResponse>, callback: grpc_1.sendUnaryData<DownloadMediaResponse>): void;
        abstract GetMessageById(call: grpc_1.ServerUnaryCall<EntityByIdRequest, Json>, callback: grpc_1.sendUnaryData<Json>): void;
        abstract GetMessages(call: grpc_1.ServerUnaryCall<GetMessagesRequest, JsonList>, callback: grpc_1.sendUnaryData<JsonList>): void;
        abstract GetContacts(call: grpc_1.ServerUnaryCall<GetContactsRequest, JsonList>, callback: grpc_1.sendUnaryData<JsonList>): void;
        abstract GetContactById(call: grpc_1.ServerUnaryCall<EntityByIdRequest, Json>, callback: grpc_1.sendUnaryData<Json>): void;
        abstract GetChats(call: grpc_1.ServerUnaryCall<GetChatsRequest, JsonList>, callback: grpc_1.sendUnaryData<JsonList>): void;
    }
    export class MessageServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMessageServiceService.definition, "MessageService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        StartSession: GrpcUnaryServiceInterface<StartSessionRequest, Empty> = (message: StartSessionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.StartSession(message, metadata, options, callback);
        };
        StopSession: GrpcUnaryServiceInterface<Session, Empty> = (message: Session, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.StopSession(message, metadata, options, callback);
        };
        GetSessionState: GrpcUnaryServiceInterface<Session, SessionStateResponse> = (message: Session, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SessionStateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SessionStateResponse>, callback?: grpc_1.requestCallback<SessionStateResponse>): grpc_1.ClientUnaryCall => {
            return super.GetSessionState(message, metadata, options, callback);
        };
        RequestCode: GrpcUnaryServiceInterface<PairCodeRequest, PairCodeResponse> = (message: PairCodeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PairCodeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PairCodeResponse>, callback?: grpc_1.requestCallback<PairCodeResponse>): grpc_1.ClientUnaryCall => {
            return super.RequestCode(message, metadata, options, callback);
        };
        Logout: GrpcUnaryServiceInterface<Session, Empty> = (message: Session, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.Logout(message, metadata, options, callback);
        };
        SetProfileName: GrpcUnaryServiceInterface<ProfileNameRequest, Empty> = (message: ProfileNameRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.SetProfileName(message, metadata, options, callback);
        };
        SetProfileStatus: GrpcUnaryServiceInterface<ProfileStatusRequest, Empty> = (message: ProfileStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.SetProfileStatus(message, metadata, options, callback);
        };
        SetProfilePicture: GrpcUnaryServiceInterface<SetProfilePictureRequest, Empty> = (message: SetProfilePictureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.SetProfilePicture(message, metadata, options, callback);
        };
        FetchGroups: GrpcUnaryServiceInterface<Session, Empty> = (message: Session, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.FetchGroups(message, metadata, options, callback);
        };
        GetGroups: GrpcUnaryServiceInterface<Session, JsonList> = (message: Session, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JsonList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JsonList>, callback?: grpc_1.requestCallback<JsonList>): grpc_1.ClientUnaryCall => {
            return super.GetGroups(message, metadata, options, callback);
        };
        GetGroupInfo: GrpcUnaryServiceInterface<JidRequest, Json> = (message: JidRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Json>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Json>, callback?: grpc_1.requestCallback<Json>): grpc_1.ClientUnaryCall => {
            return super.GetGroupInfo(message, metadata, options, callback);
        };
        CreateGroup: GrpcUnaryServiceInterface<CreateGroupRequest, Json> = (message: CreateGroupRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Json>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Json>, callback?: grpc_1.requestCallback<Json>): grpc_1.ClientUnaryCall => {
            return super.CreateGroup(message, metadata, options, callback);
        };
        LeaveGroup: GrpcUnaryServiceInterface<JidRequest, Empty> = (message: JidRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.LeaveGroup(message, metadata, options, callback);
        };
        GetGroupInviteLink: GrpcUnaryServiceInterface<JidRequest, OptionalString> = (message: JidRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<OptionalString>, options?: grpc_1.CallOptions | grpc_1.requestCallback<OptionalString>, callback?: grpc_1.requestCallback<OptionalString>): grpc_1.ClientUnaryCall => {
            return super.GetGroupInviteLink(message, metadata, options, callback);
        };
        RevokeGroupInviteLink: GrpcUnaryServiceInterface<JidRequest, OptionalString> = (message: JidRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<OptionalString>, options?: grpc_1.CallOptions | grpc_1.requestCallback<OptionalString>, callback?: grpc_1.requestCallback<OptionalString>): grpc_1.ClientUnaryCall => {
            return super.RevokeGroupInviteLink(message, metadata, options, callback);
        };
        GetGroupInfoFromLink: GrpcUnaryServiceInterface<GroupCodeRequest, Json> = (message: GroupCodeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Json>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Json>, callback?: grpc_1.requestCallback<Json>): grpc_1.ClientUnaryCall => {
            return super.GetGroupInfoFromLink(message, metadata, options, callback);
        };
        JoinGroupWithLink: GrpcUnaryServiceInterface<GroupCodeRequest, Json> = (message: GroupCodeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Json>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Json>, callback?: grpc_1.requestCallback<Json>): grpc_1.ClientUnaryCall => {
            return super.JoinGroupWithLink(message, metadata, options, callback);
        };
        SetGroupName: GrpcUnaryServiceInterface<JidStringRequest, Empty> = (message: JidStringRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.SetGroupName(message, metadata, options, callback);
        };
        SetGroupDescription: GrpcUnaryServiceInterface<JidStringRequest, Empty> = (message: JidStringRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.SetGroupDescription(message, metadata, options, callback);
        };
        SetGroupPicture: GrpcUnaryServiceInterface<SetPictureRequest, Empty> = (message: SetPictureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.SetGroupPicture(message, metadata, options, callback);
        };
        SetGroupLocked: GrpcUnaryServiceInterface<JidBoolRequest, Empty> = (message: JidBoolRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.SetGroupLocked(message, metadata, options, callback);
        };
        SetGroupAnnounce: GrpcUnaryServiceInterface<JidBoolRequest, Empty> = (message: JidBoolRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.SetGroupAnnounce(message, metadata, options, callback);
        };
        UpdateGroupParticipants: GrpcUnaryServiceInterface<UpdateParticipantsRequest, JsonList> = (message: UpdateParticipantsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JsonList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JsonList>, callback?: grpc_1.requestCallback<JsonList>): grpc_1.ClientUnaryCall => {
            return super.UpdateGroupParticipants(message, metadata, options, callback);
        };
        GetProfilePicture: GrpcUnaryServiceInterface<ProfilePictureRequest, ProfilePictureResponse> = (message: ProfilePictureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProfilePictureResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProfilePictureResponse>, callback?: grpc_1.requestCallback<ProfilePictureResponse>): grpc_1.ClientUnaryCall => {
            return super.GetProfilePicture(message, metadata, options, callback);
        };
        SendPresence: GrpcUnaryServiceInterface<PresenceRequest, Empty> = (message: PresenceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.SendPresence(message, metadata, options, callback);
        };
        SendChatPresence: GrpcUnaryServiceInterface<ChatPresenceRequest, Empty> = (message: ChatPresenceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.SendChatPresence(message, metadata, options, callback);
        };
        SubscribePresence: GrpcUnaryServiceInterface<SubscribePresenceRequest, Empty> = (message: SubscribePresenceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.SubscribePresence(message, metadata, options, callback);
        };
        CheckPhones: GrpcUnaryServiceInterface<CheckPhonesRequest, CheckPhonesResponse> = (message: CheckPhonesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckPhonesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckPhonesResponse>, callback?: grpc_1.requestCallback<CheckPhonesResponse>): grpc_1.ClientUnaryCall => {
            return super.CheckPhones(message, metadata, options, callback);
        };
        GenerateNewMessageID: GrpcUnaryServiceInterface<Session, NewMessageIDResponse> = (message: Session, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NewMessageIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NewMessageIDResponse>, callback?: grpc_1.requestCallback<NewMessageIDResponse>): grpc_1.ClientUnaryCall => {
            return super.GenerateNewMessageID(message, metadata, options, callback);
        };
        SendMessage: GrpcUnaryServiceInterface<MessageRequest, MessageResponse> = (message: MessageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageResponse>, callback?: grpc_1.requestCallback<MessageResponse>): grpc_1.ClientUnaryCall => {
            return super.SendMessage(message, metadata, options, callback);
        };
        SendReaction: GrpcUnaryServiceInterface<MessageReaction, MessageResponse> = (message: MessageReaction, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageResponse>, callback?: grpc_1.requestCallback<MessageResponse>): grpc_1.ClientUnaryCall => {
            return super.SendReaction(message, metadata, options, callback);
        };
        MarkRead: GrpcUnaryServiceInterface<MarkReadRequest, Empty> = (message: MarkReadRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.MarkRead(message, metadata, options, callback);
        };
        EditMessage: GrpcUnaryServiceInterface<EditMessageRequest, MessageResponse> = (message: EditMessageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageResponse>, callback?: grpc_1.requestCallback<MessageResponse>): grpc_1.ClientUnaryCall => {
            return super.EditMessage(message, metadata, options, callback);
        };
        RevokeMessage: GrpcUnaryServiceInterface<RevokeMessageRequest, MessageResponse> = (message: RevokeMessageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageResponse>, callback?: grpc_1.requestCallback<MessageResponse>): grpc_1.ClientUnaryCall => {
            return super.RevokeMessage(message, metadata, options, callback);
        };
        SendButtonReply: GrpcUnaryServiceInterface<ButtonReplyRequest, MessageResponse> = (message: ButtonReplyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageResponse>, callback?: grpc_1.requestCallback<MessageResponse>): grpc_1.ClientUnaryCall => {
            return super.SendButtonReply(message, metadata, options, callback);
        };
        GetSubscribedNewsletters: GrpcUnaryServiceInterface<NewsletterListRequest, NewsletterList> = (message: NewsletterListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NewsletterList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NewsletterList>, callback?: grpc_1.requestCallback<NewsletterList>): grpc_1.ClientUnaryCall => {
            return super.GetSubscribedNewsletters(message, metadata, options, callback);
        };
        GetNewsletterInfo: GrpcUnaryServiceInterface<NewsletterInfoRequest, Newsletter> = (message: NewsletterInfoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Newsletter>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Newsletter>, callback?: grpc_1.requestCallback<Newsletter>): grpc_1.ClientUnaryCall => {
            return super.GetNewsletterInfo(message, metadata, options, callback);
        };
        GetNewsletterMessagesByInvite: GrpcUnaryServiceInterface<GetNewsletterMessagesByInviteRequest, Json> = (message: GetNewsletterMessagesByInviteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Json>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Json>, callback?: grpc_1.requestCallback<Json>): grpc_1.ClientUnaryCall => {
            return super.GetNewsletterMessagesByInvite(message, metadata, options, callback);
        };
        SearchNewslettersByView: GrpcUnaryServiceInterface<SearchNewslettersByViewRequest, NewsletterSearchPageResult> = (message: SearchNewslettersByViewRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NewsletterSearchPageResult>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NewsletterSearchPageResult>, callback?: grpc_1.requestCallback<NewsletterSearchPageResult>): grpc_1.ClientUnaryCall => {
            return super.SearchNewslettersByView(message, metadata, options, callback);
        };
        SearchNewslettersByText: GrpcUnaryServiceInterface<SearchNewslettersByTextRequest, NewsletterSearchPageResult> = (message: SearchNewslettersByTextRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NewsletterSearchPageResult>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NewsletterSearchPageResult>, callback?: grpc_1.requestCallback<NewsletterSearchPageResult>): grpc_1.ClientUnaryCall => {
            return super.SearchNewslettersByText(message, metadata, options, callback);
        };
        CreateNewsletter: GrpcUnaryServiceInterface<CreateNewsletterRequest, Newsletter> = (message: CreateNewsletterRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Newsletter>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Newsletter>, callback?: grpc_1.requestCallback<Newsletter>): grpc_1.ClientUnaryCall => {
            return super.CreateNewsletter(message, metadata, options, callback);
        };
        NewsletterToggleMute: GrpcUnaryServiceInterface<NewsletterToggleMuteRequest, Empty> = (message: NewsletterToggleMuteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.NewsletterToggleMute(message, metadata, options, callback);
        };
        NewsletterToggleFollow: GrpcUnaryServiceInterface<NewsletterToggleFollowRequest, Empty> = (message: NewsletterToggleFollowRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.NewsletterToggleFollow(message, metadata, options, callback);
        };
        DownloadMedia: GrpcUnaryServiceInterface<DownloadMediaRequest, DownloadMediaResponse> = (message: DownloadMediaRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DownloadMediaResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DownloadMediaResponse>, callback?: grpc_1.requestCallback<DownloadMediaResponse>): grpc_1.ClientUnaryCall => {
            return super.DownloadMedia(message, metadata, options, callback);
        };
        GetMessageById: GrpcUnaryServiceInterface<EntityByIdRequest, Json> = (message: EntityByIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Json>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Json>, callback?: grpc_1.requestCallback<Json>): grpc_1.ClientUnaryCall => {
            return super.GetMessageById(message, metadata, options, callback);
        };
        GetMessages: GrpcUnaryServiceInterface<GetMessagesRequest, JsonList> = (message: GetMessagesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JsonList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JsonList>, callback?: grpc_1.requestCallback<JsonList>): grpc_1.ClientUnaryCall => {
            return super.GetMessages(message, metadata, options, callback);
        };
        GetContacts: GrpcUnaryServiceInterface<GetContactsRequest, JsonList> = (message: GetContactsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JsonList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JsonList>, callback?: grpc_1.requestCallback<JsonList>): grpc_1.ClientUnaryCall => {
            return super.GetContacts(message, metadata, options, callback);
        };
        GetContactById: GrpcUnaryServiceInterface<EntityByIdRequest, Json> = (message: EntityByIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Json>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Json>, callback?: grpc_1.requestCallback<Json>): grpc_1.ClientUnaryCall => {
            return super.GetContactById(message, metadata, options, callback);
        };
        GetChats: GrpcUnaryServiceInterface<GetChatsRequest, JsonList> = (message: GetChatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JsonList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JsonList>, callback?: grpc_1.requestCallback<JsonList>): grpc_1.ClientUnaryCall => {
            return super.GetChats(message, metadata, options, callback);
        };
    }
}
